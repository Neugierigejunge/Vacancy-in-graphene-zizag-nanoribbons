clc;
clear;

%constants
e=1.60*10^(-19); %electron charge  
a0=2.49*10^(-10);%Graphene lattice constant
h=6.62*10^(-34); %Planck constant
delta=10^(-5); %iteration limit
Vpp=-2.66;  %Hopping parameter
N=8; %Half of number of atoms


%Zigzag latitice width and length
Wz=(sqrt(3))*((N*(a0))/2);
%Lz=M*a0;

%Armchair latitice width and length
Wa=(N*(a0))/2;
La=sqrt(3)*a0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%% One Atom vacancy %%%%%%%%%%%%%%%%%%%%%%%%%%%%






%Hamiltonian of first unit cell
H00=zeros(2*N);
for m=1:(2*N-1)
    H00(m,m+1)=-2.66;
    H00(m+1,m)=-2.66;   
end
%Hamiltonian of connecting matrix of 2 neighbour unit cells
H01=zeros(2*N);
for k=2:4:(2*N-1)
    H01(k,k-1)=-2.66;
    H01(k+1,k+2)=-2.66;
end

 H01S=zeros(2*N);
for k=2:4:(2*N-1)
    H01S(k,k-1)=-2.66;
    H01S(k+1,k+2)=-2.66;
end
H01s(2,1)=0;

H00S=zeros(2*N);
for m=1:(2*N-1)
    H00S(m,m+1)=-2.66;
    H00S(m+1,m)=-2.66;   
end

 H00S(1,2)=0;
 H00S(2,1)=0;

%Calculating the surface retarded Green’s functions of the left and right leads
kk=1;
GEE=zeros(1,501);
for E=-2.5:0.01:2.5

Eplus=E+0.0001i;  

I=eye(2*N);
EplusI=Eplus*I;
%disp(EplusI)
t0=(inv(EplusI-H00))*H01';
ttilda0=(inv(EplusI-H00))*H01;
t=t0;
ttilda=ttilda0;
t00=t0;
ttilda00=ttilda0;
f=1;
ftilda=1;
Lambda=0;
Lambdatilda=0;
        while (real(sqrt(sum(eig(t*ctranspose(t)))))>=delta && real(sqrt(sum(eig(ttilda*ctranspose(ttilda)))))>=delta)
          f=f*ttilda;
          ftilda=ftilda*t;
          t=(I-t0*(ttilda0)-(ttilda0)*t0)\(t0*t0);
          ttilda=(I-t0*(ttilda0)-(ttilda0)*t0)\((ttilda0)*(ttilda0));
          Lambda=Lambda+f*t;
          Lambdatilda=Lambdatilda+(ftilda)*(ttilda);
          t0=t;
          ttilda0=ttilda;
        end

Lambda=Lambda+t00;
Lambdatilda=Lambdatilda+ttilda00;
g00L=inv(EplusI-H00-H01'*Lambdatilda);
gM1M1R=inv(EplusI-H00-H01*Lambda);




%New surface Green's functions
g=gM1M1R;
for gg=1:10

    if gg==4
         g=inv(EplusI-H00-((H01S)*(g)*(H01S')));
    elseif gg==5
      g=inv(EplusI-H00S-((H01)*(g)*(H01')));
    else
         g=inv(EplusI-H00-((H01)*(g)*(H01')));
    end

end

SigmaL=(H01'*g00L*H01);
SigmaLdager=ctranspose(SigmaL);


SigmaR=(H01*g*H01');
SigmaRdager=ctranspose(SigmaR);

%Total Green's function
G11=inv(EplusI-H00-SigmaL-SigmaR);


G11dager=ctranspose(G11);
GammaL=1i*(SigmaL-SigmaLdager);
GammaR=1i*(SigmaR-SigmaRdager);

%calculating transmission coefficient

T=real(trace((GammaL)*(G11)*(GammaR)*(G11dager)));

%Conductance of graphene ribbon
GEE(1,kk)=T;
kk=kk+1;



end


GEE(251)=1;



%%%%%%%%%%%%%%%%%%%%%%%%%% TWO Atom Vacancy %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





%Hamiltonian of first unit cell
H00=zeros(2*N);
for m=1:(2*N-1)
    H00(m,m+1)=-2.66;
    H00(m+1,m)=-2.66;   
end
%Hamiltonian of connecting matrix of 2 neighbour unit cells
H01=zeros(2*N);
for k=2:4:(2*N-1)
    H01(k,k-1)=-2.66;
    H01(k+1,k+2)=-2.66;
end

 H01S=zeros(2*N);
for k=2:4:(2*N-1)
    H01S(k,k-1)=-2.66;
    H01S(k+1,k+2)=-2.66;
end

H01S(3,4)=0;


H00S=zeros(2*N);
for m=1:(2*N-1)
    H00S(m,m+1)=-2.66;
    H00S(m+1,m)=-2.66;   
end


 H00S(2,3)=0;
 H00S(3,2)=0;

%Calculating the surface retarded Green’s functions of the left and right leads
kkk=1;
GEEE=zeros(1,501);
for E=-2.5:0.01:2.5

Eplus=E+0.0001i;  

I=eye(2*N);
EplusI=Eplus*I;
%disp(EplusI)
t0=(inv(EplusI-H00))*H01';
ttilda0=(inv(EplusI-H00))*H01;
t=t0;
ttilda=ttilda0;
t00=t0;
ttilda00=ttilda0;
f=1;
ftilda=1;
Lambda=0;
Lambdatilda=0;
        while (real(sqrt(sum(eig(t*ctranspose(t)))))>=delta && real(sqrt(sum(eig(ttilda*ctranspose(ttilda)))))>=delta)
          f=f*ttilda;
          ftilda=ftilda*t;
          t=(I-t0*(ttilda0)-(ttilda0)*t0)\(t0*t0);
          ttilda=(I-t0*(ttilda0)-(ttilda0)*t0)\((ttilda0)*(ttilda0));
          Lambda=Lambda+f*t;
          Lambdatilda=Lambdatilda+(ftilda)*(ttilda);
          t0=t;
          ttilda0=ttilda;
        end

Lambda=Lambda+t00;
Lambdatilda=Lambdatilda+ttilda00;
g00L=inv(EplusI-H00-H01'*Lambdatilda);
gM1M1R=inv(EplusI-H00-H01*Lambda);




%New surface Green's functions
g=gM1M1R;
for gg=1:10

    if gg==4
         g=inv(EplusI-H00-((H01S)*(g)*(H01S')));
    elseif gg==5
      g=inv(EplusI-H00S-((H01)*(g)*(H01')));
    else
         g=inv(EplusI-H00-((H01)*(g)*(H01')));
    end

end

SigmaL=(H01'*g00L*H01);
SigmaLdager=ctranspose(SigmaL);


SigmaR=(H01*g*H01');
SigmaRdager=ctranspose(SigmaR);

%Total Green's function
G11=inv(EplusI-H00-SigmaL-SigmaR);


G11dager=ctranspose(G11);
GammaL=1i*(SigmaL-SigmaLdager);
GammaR=1i*(SigmaR-SigmaRdager);

%calculating transmission coefficient

T=real(trace((GammaL)*(G11)*(GammaR)*(G11dager)));

%Conductance of graphene ribbon
GEEE(1,kkk)=T;
kkk=kkk+1;



end
GEEE(251)=1;


%%%%%%%%%%%%%%%%%% Three Atom Vacancy %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%







%Hamiltonian of first unit cell
H00=zeros(2*N);
for m=1:(2*N-1)
    H00(m,m+1)=-2.66;
    H00(m+1,m)=-2.66;   
end
%Hamiltonian of connecting matrix of 2 neighbour unit cells
H01=zeros(2*N);
for k=2:4:(2*N-1)
    H01(k,k-1)=-2.66;
    H01(k+1,k+2)=-2.66;
end

 H01S=zeros(2*N);
for k=2:4:(2*N-1)
    H01S(k,k-1)=-2.66;
    H01S(k+1,k+2)=-2.66;
end
H01s(2,1)=0;
H01s(3,4)=0;

H00S=zeros(2*N);
for m=1:(2*N-1)
    H00S(m,m+1)=-2.66;
    H00S(m+1,m)=-2.66;   
end


 H00S(2,3)=0;
 H00S(3,2)=0;

 H01SS=zeros(2*N);
for k=2:4:(2*N-1)
    H01SS(k,k-1)=-2.66;
    H01SS(k+1,k+2)=-2.66;
end
H01ss(2,1)=0;

H00SS=zeros(2*N);
for m=1:(2*N-1)
    H00SS(m,m+1)=-2.66;
    H00SS(m+1,m)=-2.66;   
end

 H00SS(1,2)=0;
 H00SS(2,1)=0;

%Calculating the surface retarded Green’s functions of the left and right leads
kkkk=1;
GEEEE=zeros(1,501);
for E=-2.5:0.01:2.5

Eplus=E+0.0001i;  

I=eye(2*N);
EplusI=Eplus*I;
%disp(EplusI)
t0=(inv(EplusI-H00))*H01';
ttilda0=(inv(EplusI-H00))*H01;
t=t0;
ttilda=ttilda0;
t00=t0;
ttilda00=ttilda0;
f=1;
ftilda=1;
Lambda=0;
Lambdatilda=0;
        while (real(sqrt(sum(eig(t*ctranspose(t)))))>=delta && real(sqrt(sum(eig(ttilda*ctranspose(ttilda)))))>=delta)
          f=f*ttilda;
          ftilda=ftilda*t;
          t=(I-t0*(ttilda0)-(ttilda0)*t0)\(t0*t0);
          ttilda=(I-t0*(ttilda0)-(ttilda0)*t0)\((ttilda0)*(ttilda0));
          Lambda=Lambda+f*t;
          Lambdatilda=Lambdatilda+(ftilda)*(ttilda);
          t0=t;
          ttilda0=ttilda;
        end

Lambda=Lambda+t00;
Lambdatilda=Lambdatilda+ttilda00;
g00L=inv(EplusI-H00-H01'*Lambdatilda);
gM1M1R=inv(EplusI-H00-H01*Lambda);




%New surface Green's functions
g=gM1M1R;
for gg=1:10

    if gg==5
         g=inv(EplusI-H00-((H01S)*(g)*(H01S')));
    elseif gg==6
      g=inv(EplusI-H00S-((H01)*(g)*(H01')));
    else
         g=inv(EplusI-H00-((H01)*(g)*(H01')));
    end

end

SigmaL=(H01'*g00L*H01);
SigmaLdager=ctranspose(SigmaL);


SigmaR=(H01*g*H01');
SigmaRdager=ctranspose(SigmaR);

%Total Green's function
G11=inv(EplusI-H00-SigmaL-SigmaR);


G11dager=ctranspose(G11);
GammaL=1i*(SigmaL-SigmaLdager);
GammaR=1i*(SigmaR-SigmaRdager);

%calculating transmission coefficient

T=real(trace((GammaL)*(G11)*(GammaR)*(G11dager)));

%Conductance of graphene ribbon
GEEEE(1,kkkk)=T;
kkkk=kkkk+1;



end
GEEEE(251)=1;

%%%%%%%%%%%%%%%%%%%% plotting  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


E=-2.5:0.01:2.5;

plot(E,GE,'k', E,GEEE,'g--', E,GEEEE,'r--', E,GEE,'b-')

xlabel('E(eV)')
ylabel('G(2e^2/h)')
xlim([-2.5 2.5])
ylim([0 4])
legend(' NO vacancy ',' One atom vacancy ',' Two atoms vacancy ',' Three atoms vacancy ')

